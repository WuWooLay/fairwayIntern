class DateGroupForm {
	constructor(t = [], e = {}) {
		;(this.LargeNameMonth = [
			'January',
			'February',
			'March',
			'April',
			'May',
			'June',
			'July',
			'August',
			'September',
			'October',
			'November',
			'December'
		]),
			(this.ShortNameMonth = this.LargeNameMonth.map(t => t.slice(0, 3)))
		const r = {
			monthFormat: 'large',
			monthSelectName: 'Select Month',
			minYear: new Date().getFullYear() - 90,
			maxYear: new Date().getFullYear(),
			toggleErrorClass: !0,
			toggleErrorClassName: 'error',
			onChangeClear: !1,
			onChangeGet: !1
		}
		;(this.opt = { ...r, ...e }),
			(this.opt.minYear = +this.opt.minYear),
			(this.opt.maxYear = +this.opt.maxYear),
			(this.dateGroupObj = { day: null, month: null, year: null, error: null }),
			(this.day = 0),
			(this.month = 0),
			(this.year = 0),
			this.isArrayFirstParams(t),
			this.isObjectSecondParams(e)
	}
	setDay(t) {
		return this.setDayElement(this.returnCheckElement(t))
	}
	setMonth(t) {
		return this.setMonthElement(this.returnCheckElement(t))
	}
	setYear(t) {
		return this.setYearElement(this.returnCheckElement(t))
	}
	setError(t) {
		return this.setErrorElement(this.returnCheckElement(t))
	}
	option(t = {}) {
		return (this.opt = { ...this.opt, ...t }), t.monthSelectName && this.setSelectorMonthList(), this
	}
	setDayElement(t) {
		return (
			(t.maxLength = 2),
			t.addEventListener('change', t => this.dayElementOnChange(t)),
			t.addEventListener('keyup', t => this.dayElementOnChange(t)),
			(this.dateGroupObj.day = t),
			this
		)
	}
	setMonthElement(t) {
		return (
			(this.dateGroupObj.month = t),
			t.addEventListener('change', t => this.monthElementOnChange(t)),
			t.addEventListener('keyup', t => this.monthElementOnChange(t)),
			this.setSelectorMonthList(),
			this
		)
	}
	setYearElement(t) {
		return (
			(t.maxLength = 4),
			t.addEventListener('change', t => this.yearElementOnChange(t)),
			t.addEventListener('keyup', t => this.yearElementOnChange(t)),
			(this.dateGroupObj.year = t),
			this
		)
	}
	setErrorElement(t) {
		return (this.dateGroupObj.error = t), this
	}
	getDateGroup() {
		return this.dateGroupObj
	}
	getDay() {
		return this.day
	}
	getMonth() {
		return this.month
	}
	getMonthByName() {
		let t = +this.month
		return 0 === t
			? this.opt.monthSelectName
			: t > 0 && t < 13
				? 'large' === this.opt.monthFormat ? this.LargeNameMonth[t - 1] : this.ShortNameMonth[t - 1]
				: 'Error'
	}
	getYear() {
		return this.year
	}
	dayElementOnChange(t) {
		let { value: e } = t.target
		;(this.day = e), this.pleaseEnterValidDate()
	}
	monthElementOnChange(t) {
		let { value: e } = t.target
		;(this.month = e), this.pleaseEnterValidDate()
	}
	yearElementOnChange(t) {
		let { value: e } = t.target
		;(this.year = e), this.pleaseEnterValidDate()
	}
	returnCheckElement(t, e = '') {
		if ('string' == typeof t) {
			if ('#' !== t[0] && '.' !== t[0]) throw new Error(`${t} Not Selector`)
			let r =
				'#' === t[0]
					? document.getElementById(t.split('').filter(t => '#' !== t).join``)
					: document.querySelector(t)
			if (null === r) throw Error(`Your Index ${e} => ${t} is Not Element \nLwin `)
			return r
		}
		if ('object' == typeof t && null !== t) {
			if (0 === Object.keys(t).length) throw Error(`Your Index ${e} => ${t} is Not Element \nLwin `)
			return t[0]
		}
		throw Error(`Your Index ${e} => ${t} is Not Element \nLwin `)
	}
	setSelectorMonthList() {
		let t =
			'large' === this.opt.monthFormat
				? [ this.opt.monthSelectName ].concat(this.LargeNameMonth)
				: [ this.opt.monthSelectName ].concat(this.ShortNameMonth)
		null !== this.dateGroupObj.month &&
			(this.dateGroupObj.month.innerHTML = t.map((t, e) => `<option value=${e}>${t}</option>`).join``)
	}
	validateDay() {
		let t = this.day
		return !isNaN(t) && '' != t && (t > 0 && t < 32)
	}
	validateMonth() {
		let t = this.month
		return !isNaN(t) && '' != t && (t > 0 && t < 13)
	}
	validateYear() {
		let t = this.year
		return !isNaN(t) && '' != t && (t >= this.opt.minYear && t <= this.opt.maxYear)
	}
	allValid() {
		return this.validateDay() && this.validateMonth() && this.validateYear()
	}
	isValid() {
		let t = !1
		if (this.allValid()) {
			if (2 == this.month) {
				let t = 28
				return this.year % 4 == 0 && (t = 29), this.day <= t
			}
			t = this.allValid()
		}
		return t
	}
	showError() {
		if (
			(null !== this.dateGroupObj.error &&
				(this.isValid() || (this.dateGroupObj.error.innerHTML = 'Please Enter Valid Date')),
			this.opt.toggleErrorClass)
		) {
			let t = this.dateGroupObj.day,
				e = this.dateGroupObj.month,
				r = this.dateGroupObj.year
			null !== t && t && t.classList.add(this.opt.toggleErrorClassName),
				null !== e && e && e.classList.add(this.opt.toggleErrorClassName),
				null !== r && r && r.classList.add(this.opt.toggleErrorClassName)
		}
	}
	clearError() {
		if (
			null !== this.dateGroupObj.error &&
			this.validateDay() &&
			this.validateMonth() &&
			this.validateYear() &&
			((this.dateGroupObj.error.innerHTML = ''), this.opt.toggleErrorClass)
		) {
			let t = this.dateGroupObj.day,
				e = this.dateGroupObj.month,
				r = this.dateGroupObj.year,
				a = this.opt.toggleErrorClassName
			t.classList.remove(a), e.classList.remove(a), r.classList.remove(a)
		}
	}
	pleaseEnterValidDate() {
		this.opt.onChangeClear && null !== this.dateGroupObj.error && this.clearError()
	}
	isArrayFirstParams(t) {
		t.forEach((t, e) => {
			let r = this.returnCheckElement(t, e)
			0 === e && this.setDayElement(r),
				1 === e && this.setMonthElement(r),
				2 === e && this.setYearElement(r),
				3 === e && this.setErrorElement(r)
		})
	}
	isObjectSecondParams(t) {
		if (('object' != typeof t && 'function' != typeof t) || null === t) throw new Error('Second Param Not Object')
	}
}
