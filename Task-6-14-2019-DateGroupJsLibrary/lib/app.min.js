'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral([''], ['']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DateGroupForm = function () {
	function DateGroupForm() {
		var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
		var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		_classCallCheck(this, DateGroupForm);

		;this.LargeNameMonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], this.ShortNameMonth = this.LargeNameMonth.map(function (t) {
			return t.slice(0, 3);
		});
		var r = {
			monthFormat: 'large',
			monthSelectName: 'Select Month',
			minYear: new Date().getFullYear() - 90,
			maxYear: new Date().getFullYear(),
			toggleErrorClass: !0,
			toggleErrorClassName: 'error',
			onChangeClear: !1,
			onChangeGet: !1
		};this.opt = _extends({}, r, e), this.opt.minYear = +this.opt.minYear, this.opt.maxYear = +this.opt.maxYear, this.dateGroupObj = { day: null, month: null, year: null, error: null }, this.day = 0, this.month = 0, this.year = 0, this.isArrayFirstParams(t), this.isObjectSecondParams(e);
	}

	_createClass(DateGroupForm, [{
		key: 'setDay',
		value: function setDay(t) {
			return this.setDayElement(this.returnCheckElement(t));
		}
	}, {
		key: 'setMonth',
		value: function setMonth(t) {
			return this.setMonthElement(this.returnCheckElement(t));
		}
	}, {
		key: 'setYear',
		value: function setYear(t) {
			return this.setYearElement(this.returnCheckElement(t));
		}
	}, {
		key: 'setError',
		value: function setError(t) {
			return this.setErrorElement(this.returnCheckElement(t));
		}
	}, {
		key: 'option',
		value: function option() {
			var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

			return this.opt = _extends({}, this.opt, t), t.monthSelectName && this.setSelectorMonthList(), this;
		}
	}, {
		key: 'setDayElement',
		value: function setDayElement(t) {
			var _this = this;

			return t.maxLength = 2, t.addEventListener('change', function (t) {
				return _this.dayElementOnChange(t);
			}), t.addEventListener('keyup', function (t) {
				return _this.dayElementOnChange(t);
			}), this.dateGroupObj.day = t, this;
		}
	}, {
		key: 'setMonthElement',
		value: function setMonthElement(t) {
			var _this2 = this;

			return this.dateGroupObj.month = t, t.addEventListener('change', function (t) {
				return _this2.monthElementOnChange(t);
			}), t.addEventListener('keyup', function (t) {
				return _this2.monthElementOnChange(t);
			}), this.setSelectorMonthList(), this;
		}
	}, {
		key: 'setYearElement',
		value: function setYearElement(t) {
			var _this3 = this;

			return t.maxLength = 4, t.addEventListener('change', function (t) {
				return _this3.yearElementOnChange(t);
			}), t.addEventListener('keyup', function (t) {
				return _this3.yearElementOnChange(t);
			}), this.dateGroupObj.year = t, this;
		}
	}, {
		key: 'setErrorElement',
		value: function setErrorElement(t) {
			return this.dateGroupObj.error = t, this;
		}
	}, {
		key: 'getDateGroup',
		value: function getDateGroup() {
			return this.dateGroupObj;
		}
	}, {
		key: 'getDay',
		value: function getDay() {
			return this.day;
		}
	}, {
		key: 'getMonth',
		value: function getMonth() {
			return this.month;
		}
	}, {
		key: 'getMonthByName',
		value: function getMonthByName() {
			var t = +this.month;
			return 0 === t ? this.opt.monthSelectName : t > 0 && t < 13 ? 'large' === this.opt.monthFormat ? this.LargeNameMonth[t - 1] : this.ShortNameMonth[t - 1] : 'Error';
		}
	}, {
		key: 'getYear',
		value: function getYear() {
			return this.year;
		}
	}, {
		key: 'dayElementOnChange',
		value: function dayElementOnChange(t) {
			var e = t.target.value;
			this.day = e, this.pleaseEnterValidDate();
		}
	}, {
		key: 'monthElementOnChange',
		value: function monthElementOnChange(t) {
			var e = t.target.value;
			this.month = e, this.pleaseEnterValidDate();
		}
	}, {
		key: 'yearElementOnChange',
		value: function yearElementOnChange(t) {
			var e = t.target.value;
			this.year = e, this.pleaseEnterValidDate();
		}
	}, {
		key: 'returnCheckElement',
		value: function returnCheckElement(t) {
			var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

			if ('string' == typeof t) {
				if ('#' !== t[0] && '.' !== t[0]) throw new Error(t + ' Not Selector');
				var r = '#' === t[0] ? document.getElementById(t.split('').filter(function (t) {
					return '#' !== t;
				}).join(_templateObject)) : document.querySelector(t);
				if (null === r) throw Error('Your Index ' + e + ' => ' + t + ' is Not Element \nLwin ');
				return r;
			}
			if ('object' == (typeof t === 'undefined' ? 'undefined' : _typeof(t)) && null !== t) {
				if (0 === Object.keys(t).length) throw Error('Your Index ' + e + ' => ' + t + ' is Not Element \nLwin ');
				return t[0];
			}
			throw Error('Your Index ' + e + ' => ' + t + ' is Not Element \nLwin ');
		}
	}, {
		key: 'setSelectorMonthList',
		value: function setSelectorMonthList() {
			var t = 'large' === this.opt.monthFormat ? [this.opt.monthSelectName].concat(this.LargeNameMonth) : [this.opt.monthSelectName].concat(this.ShortNameMonth);
			null !== this.dateGroupObj.month && (this.dateGroupObj.month.innerHTML = t.map(function (t, e) {
				return '<option value=' + e + '>' + t + '</option>';
			}).join(_templateObject));
		}
	}, {
		key: 'validateDay',
		value: function validateDay() {
			var t = this.day;
			return !isNaN(t) && '' != t && t > 0 && t < 32;
		}
	}, {
		key: 'validateMonth',
		value: function validateMonth() {
			var t = this.month;
			return !isNaN(t) && '' != t && t > 0 && t < 13;
		}
	}, {
		key: 'validateYear',
		value: function validateYear() {
			var t = this.year;
			return !isNaN(t) && '' != t && t >= this.opt.minYear && t <= this.opt.maxYear;
		}
	}, {
		key: 'allValid',
		value: function allValid() {
			return this.validateDay() && this.validateMonth() && this.validateYear();
		}
	}, {
		key: 'isValid',
		value: function isValid() {
			var t = !1;
			if (this.allValid()) {
				if (2 == this.month) {
					var _t = 28;
					return this.year % 4 == 0 && (_t = 29), this.day <= _t;
				}
				t = this.allValid();
			}
			return t;
		}
	}, {
		key: 'showError',
		value: function showError() {
			if (null !== this.dateGroupObj.error && (this.isValid() || (this.dateGroupObj.error.innerHTML = 'Please Enter Valid Date')), this.opt.toggleErrorClass) {
				var t = this.dateGroupObj.day,
				    e = this.dateGroupObj.month,
				    r = this.dateGroupObj.year;
				null !== t && t && t.classList.add(this.opt.toggleErrorClassName), null !== e && e && e.classList.add(this.opt.toggleErrorClassName), null !== r && r && r.classList.add(this.opt.toggleErrorClassName);
			}
		}
	}, {
		key: 'clearError',
		value: function clearError() {
			if (null !== this.dateGroupObj.error && this.validateDay() && this.validateMonth() && this.validateYear() && (this.dateGroupObj.error.innerHTML = '', this.opt.toggleErrorClass)) {
				var t = this.dateGroupObj.day,
				    e = this.dateGroupObj.month,
				    r = this.dateGroupObj.year,
				    a = this.opt.toggleErrorClassName;
				t.classList.remove(a), e.classList.remove(a), r.classList.remove(a);
			}
		}
	}, {
		key: 'pleaseEnterValidDate',
		value: function pleaseEnterValidDate() {
			this.opt.onChangeClear && null !== this.dateGroupObj.error && this.clearError();
		}
	}, {
		key: 'isArrayFirstParams',
		value: function isArrayFirstParams(t) {
			var _this4 = this;

			t.forEach(function (t, e) {
				var r = _this4.returnCheckElement(t, e);
				0 === e && _this4.setDayElement(r), 1 === e && _this4.setMonthElement(r), 2 === e && _this4.setYearElement(r), 3 === e && _this4.setErrorElement(r);
			});
		}
	}, {
		key: 'isObjectSecondParams',
		value: function isObjectSecondParams(t) {
			if ('object' != (typeof t === 'undefined' ? 'undefined' : _typeof(t)) && 'function' != typeof t || null === t) throw new Error('Second Param Not Object');
		}
	}]);

	return DateGroupForm;
}();